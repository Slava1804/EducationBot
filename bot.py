import os
import asyncio
import requests
import re
import aiohttp
from dotenv import load_dotenv
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import Command
from aiogram.types import BotCommand, InlineKeyboardButton, InlineKeyboardMarkup, Message, PreCheckoutQuery, LabeledPrice, CallbackQuery, BotCommandScopeChat

load_dotenv()

API_TOKEN = os.getenv('TELEGRAM_TOKEN_BOT')
DJANGO_API_URL = os.getenv('DJANGO_API_URL', 'http://127.0.0.1:8000/api/users/')
STATS_API_URL = os.getenv('STATS_API_URL', 'http://127.0.0.1:8000/api/users/stats/')
PAYMENT_TOKEN = os.getenv("PAYMENT_PROVIDER_TOKEN")

bot = Bot(token=API_TOKEN)
dp = Dispatcher()
class WordCountStates(StatesGroup):
    waiting_for_text = State()

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
async def get_user_data(telegram_id: int):
    response = requests.get(f"{DJANGO_API_URL}{telegram_id}/")
    if response.status_code == 200:
        return response.json()
    return None

async def is_user_registered(telegram_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ Telegram ID.
    """
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{DJANGO_API_URL}{telegram_id}/") as response:
            if response.status == 200:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                return True
            elif response.status == 404:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
                return False
            else:
                # –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
                raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {response.status}")

async def update_user_tasks(telegram_id: int, tasks_completed: int, daily_tasks_completed: int):
    async with aiohttp.ClientSession() as session:
        async with session.patch(
            f"{DJANGO_API_URL}{telegram_id}/update_tasks/",
            json={
                "tasks_completed": tasks_completed,
                "daily_tasks_completed": daily_tasks_completed,
            }
        ) as response:
            return response.status == 200

async def check_subscriptions():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–∫–æ–Ω—á–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
    """
    async with aiohttp.ClientSession() as session:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            async with session.get(DJANGO_API_URL) as response:
                if response.status == 200:
                    users = await response.json()

                    for user in users:
                        telegram_id = user.get("telegram_id")
                        subscription_end = user.get("subscription_end")  # –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
                        is_subscribed = user.get("is_subscribed", False)

                        if subscription_end and is_subscribed:
                            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –≤ –æ–±—ä–µ–∫—Ç datetime
                            subscription_end_date = datetime.strptime(subscription_end, "%Y-%m-%d")
                            days_left = (subscription_end_date - datetime.now()).days

                            if days_left == 2:  # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å 2 –¥–Ω—è
                                await bot.send_message(
                                    chat_id=telegram_id,
                                    text=(
                                        "üì¢ –£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n\n"
                                        "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 2 –¥–Ω—è. "
                                        "–ü—Ä–æ–¥–ª–∏—Ç–µ –µ—ë, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π."
                                    )
                                )
                            elif days_left < 0:  # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞
                                update_data = {"is_subscribed": False}
                                async with session.patch(f"{DJANGO_API_URL}{telegram_id}/", json=update_data) as update_response:
                                    if update_response.status == 200:
                                        print(f"–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")
                else:
                    print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {response.status}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")

async def fetch_statistics():
    try:
        response = requests.get(STATS_API_URL)
        if response.status_code == 200:
            return response.json()
        else:
            return None
    except requests.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return None

@dp.startup()
async def on_startup(bot: Bot):
    async with aiohttp.ClientSession() as session:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            async with session.get(DJANGO_API_URL) as response:
                if response.status == 200:
                    users = await response.json()
                    # –û–±—Ö–æ–¥–∏–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
                    for user in users:
                        telegram_id = user.get("telegram_id")
                        is_registered = await is_user_registered(telegram_id)
                        if telegram_id and is_registered:
                            try:
                                await set_bot_commands(bot, telegram_id)
                            except Exception as e:
                                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
                else:
                    print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {response.status}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")

    scheduler = AsyncIOScheduler()
    scheduler.add_job(check_subscriptions, "interval", days=1)  # –ó–∞–ø—É—Å–∫–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ
    scheduler.start()
    print("–§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω–∞.")

async def set_bot_commands(bot: Bot, telegram_id: int):
    commands = [
        BotCommand(command="/word_count", description="–ü–æ–¥—Å—á–µ—Ç —Å–ª–æ–≤"),
        BotCommand(command="/subscribe", description="–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏"),
    ]

    try:
        is_registered = await is_user_registered(telegram_id)
        if is_registered:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
            user = await get_user_data(telegram_id)
            if user and user.get('is_admin', False):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
                commands.extend([
                    BotCommand(command="/admin_stats", description="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"),
                    BotCommand(command="/add_admin", description="–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"),
                ])
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
    
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await bot.set_my_commands(commands, scope=BotCommandScopeChat(chat_id=telegram_id))
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥ –¥–ª—è —á–∞—Ç–∞ {telegram_id}: {e}")

# –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–º–µ–Ω—é
def get_inline_menu():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="register")],
    ])
    return keyboard
class AddAdminStates(StatesGroup):
    waiting_for_telegram_id = State()

# –ö–æ–º–∞–Ω–¥–∞ /add_admin
@dp.message(Command("add_admin"))
async def add_admin_command(message: Message, state: FSMContext):
    telegram_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    user_data = await get_user_data(telegram_id)
    if not user_data or not user_data.get("is_admin", False):
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –ó–∞–ø—Ä–æ—Å —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await message.reply("–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    await state.set_state(AddAdminStates.waiting_for_telegram_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ admin
@dp.message(AddAdminStates.waiting_for_telegram_id)
async def process_add_admin(message: Message, state: FSMContext):
    try:
        new_admin_id = int(message.text)  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —á–∏—Å–ª–æ

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Telegram ID
        user_data = await get_user_data(new_admin_id)
        if not user_data:
            await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {new_admin_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API
        async with aiohttp.ClientSession() as session:
            update_data = {"is_admin": True}
            async with session.patch(f"{DJANGO_API_URL}{new_admin_id}/", json=update_data) as response:
                if response.status == 200:
                    await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {new_admin_id} —Ç–µ–ø–µ—Ä—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
                else:
                    await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
        await state.clear()  # –û—á–∏—â–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è

    except ValueError:
        # –ï—Å–ª–∏ –≤–≤–æ–¥ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID.")
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—á–∏—Ö –æ—à–∏–±–æ–∫
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        await state.clear()

@dp.message(Command('start'))
async def start_command(message: Message):
    await message.reply(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.",
        reply_markup=get_inline_menu()  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    )

@dp.callback_query(lambda callback: callback.data == "register")
async def process_register_callback(callback: CallbackQuery):
    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ `register_user` —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö callback.message
    message = callback.message
    telegram_id = message.chat.id
    username = message.chat.username or "Unknown"
    
    data = {
        "telegram_id": telegram_id,
        "username": username,
    }

    async with aiohttp.ClientSession() as session:
        async with session.post(DJANGO_API_URL, json=data) as response:
            if response.status == 201:
                await message.reply(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, {username}.")
            elif response.status == 400:
                await message.reply("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
            else:
                await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
    await callback.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∂–∞—Ç–∏–∏

@dp.message(Command('word_count'))
async def word_count_command(message: Message, state: FSMContext):
    # –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–º–∞–Ω–¥—ã /word_count
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å–ª–æ–≤.")
    await state.set_state(WordCountStates.waiting_for_text)  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞

@dp.callback_query()
async def handle_callbacks(callback: CallbackQuery, state: FSMContext):
    if callback.data == "word_count":
        await callback.message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å–ª–æ–≤.")
        await state.set_state(WordCountStates.waiting_for_text)  # –°—Ç–∞–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        await callback.answer()

@dp.message(WordCountStates.waiting_for_text)
async def count_words(message: Message, state: FSMContext):
    telegram_id = message.from_user.id

    try:
        user_data = await get_user_data(telegram_id)  # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not user_data:
            await message.reply("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")
            await state.clear()
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏ –ª–∏–º–∏—Ç
        is_subscribed = user_data.get('is_subscribed', False)
        tasks_completed = user_data.get('tasks_completed', 0)

        if not is_subscribed and tasks_completed >= 5:
            await message.reply("–í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –∑–∞–¥–∞—á –∑–∞ –¥–µ–Ω—å. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")
            await state.clear()
            return

        # –ü–æ–¥—Å—á–µ—Ç —Å–ª–æ–≤
        text = message.text
        words = re.sub(r'[^\w\s]', '', text).split()
        word_count = {word: words.count(word) for word in words}

        sorted_words = sorted(word_count.items())
        output = "<b>üìä –ß–∞—Å—Ç–æ—Ç–∞ —Å–ª–æ–≤:</b>\n\n"
        for word, count in sorted_words:
            output += f"<b>{word}</b>: <i>{count}</i> —Ä–∞–∑(–∞)\n"

        await message.reply(output, parse_mode="HTML")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await update_user_tasks(
            telegram_id=telegram_id,
            tasks_completed=1,
            daily_tasks_completed=1,
        )

        await state.clear()

    except Exception as e:
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        await state.clear()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
@dp.message(Command("subscribe"))
async def subscribe(message: Message):
    telegram_id = message.from_user.id

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user_data = await get_user_data(telegram_id)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        if not user_data:
            await message.reply(
                "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã –¥–æ–ª–∂–Ω—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.",
                reply_markup=get_inline_menu()  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
        if user_data.get("is_subscribed"):
            await message.reply("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –Ω–∞—à–∏–º –±–æ—Ç–æ–º!")
            return

    except Exception as e:
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        return

    # –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    price = 29000  # –¶–µ–Ω–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö (29000 = 290 —Ä—É–±–ª–µ–π)

    # –û–ø—Ä–µ–¥–µ–ª–∏–º —Å–ø–∏—Å–æ–∫ —Ü–µ–Ω –¥–ª—è –∏–Ω–≤–æ–π—Å–∞ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã)
    prices = [LabeledPrice(label="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü", amount=price)]

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π payload –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã
    payload = f"subscription-{telegram_id}-{price}"

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–≤–æ–π—Å–∞
    await bot.send_invoice(
        chat_id=message.chat.id,
        title="–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –±–æ—Ç",
        description="–û–ø–ª–∞—Ç–∞ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 1 –º–µ—Å—è—Ü.",
        provider_token=PAYMENT_TOKEN,
        currency="rub",
        prices=prices,
        payload=payload,
        start_parameter="subscription",
        is_flexible=False
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã
@dp.pre_checkout_query()
async def process_pre_checkout(pre_checkout_query: PreCheckoutQuery):
    # –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç–µ–∂
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
@dp.message(lambda message: message.successful_payment is not None)
async def handle_successful_payment(message: Message):
    # –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
    payment_info = message.successful_payment
    amount = payment_info.total_amount / 100  # –°—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö
    currency = payment_info.currency
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{DJANGO_API_URL}{user_id}/") as response:
            if response.status == 200:
                user_data = await response.json()
                is_subscribed = user_data.get("is_subscribed", False)
                current_subscription_end = user_data.get("subscription_end")

                # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
                today = datetime.now()
                if current_subscription_end:
                    # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –±—ã–ª–∞, –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –æ—Ç —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è
                    current_end_date = datetime.strptime(current_subscription_end, "%Y-%m-%dT%H:%M:%S")
                    new_subscription_end = max(current_end_date, today) + timedelta(days=30)
                else:
                    # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –±—ã–ª–æ, –Ω–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å—á–µ—Ç —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
                    new_subscription_end = today + timedelta(days=30)

                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
                update_data = {
                    "is_subscribed": True,
                    "subscription_end": new_subscription_end.isoformat()
                }

                async with session.patch(f"{DJANGO_API_URL}{user_id}/", json=update_data) as update_response:
                    if update_response.status == 200:
                        await message.reply(
                            f"üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É!\n"
                            f"üí∞ –°—É–º–º–∞: {amount} {currency}\n"
                            f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ {new_subscription_end.strftime('%Y-%m-%d')}!"
                        )
                    else:
                        await message.reply("–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            else:
                await message.reply("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def is_admin(telegram_id: int) -> bool:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    user_data = await get_user_data(telegram_id)
    return user_data.get("is_admin", False)

@dp.message(Command("admin_stats"))
async def admin_stats(message: Message):
    user_id = message.from_user.id
    if await is_admin(user_id):
        try:
            response = requests.get(f"{DJANGO_API_URL}{user_id}/daily_statistics/")
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            print(response.text)  # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
            if response.status_code == 200:
                stats = response.json()
                if isinstance(stats, dict):
                    stats_message = "<b>üìä –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
                    for user_id, user in stats.items():
                        username, daily_tasks, tasks = user.values()
                        stats_message += f"<b>{username} ‚Äì {user_id}</b>\n  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞ –¥–µ–Ω—å: <b>{daily_tasks}</b>\n  –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{tasks}\n\n</b>"
                    await message.reply(stats_message, parse_mode="HTML")
                else:
                    await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –û—Ç–≤–µ—Ç –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.", parse_mode="HTML")
            else:
                await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {response.status_code}", parse_mode="HTML")
        except requests.exceptions.RequestException as e:
            await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É: {e}", parse_mode="HTML")
    else:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", parse_mode="HTML")

async def main():
    await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    asyncio.run(main())  # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞